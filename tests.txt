// CSC 365. Spring 2019
// Lab 1-2 test suite

// TC-1
// Tests Requirements R3, R4
// short form command name, existing student
// expected output: ['HAVIR' 'BOBBIE' '2' '108' 'HAMER' 'GAVIN']

S: HAVIR

// TC-2
// Tests Requirements R3, R4
// short form command name, non-existing student
// expected output: []

S: NEMO

// TC-3
// Tests Requirements R3, R4
// long form command name, existing student
// expected output: ['HAVIR' 'BOBBIE' '2' '108' 'HAMER' 'GAVIN']

Student: HAVIR

// TC-4
// Tests Requirements R3, R4
// long form command name, non-existing student
// expected output: []

Student: NEMO

// TC-5
// Tests Requirements R3, R5
// short form command name, existing student
// expected output: ['HAVIR' 'BOBBIE' 0]

S: HAVIR B

// TC-6
// Tests Requirements R3, R5
// short form command name, non-existing student
// expected output: []

S: NEMO B

// TC-7
// Tests Requirements R3, R5
// long form command name, existing student
// expected output: ['HAVIR' 'BOBBIE' 0]

Student: HAVIR Bus

// TC-8
// Tests Requirements R3, R5
// long form command name, non-existing student
// expected output: []

Student: NEMO Bus

// TC-9
// Tests Requirements R3, R6
// short form command name, existing teacher
// expected output: [
  ['LIBRANDI' 'TODD']
  ['HAVIR' 'BOBBIE']
  ['SARAO' 'DIEDRA']
  ['VANCOTT' 'MIKE']
  ['WICINSKY' 'TERESE']
  ['KOZOLA' 'BUSTER']
  ['MULLINGS' 'LEIGHANN']
  ['BUSSMANN' 'BILLY']
  ['BERBES' 'DICK']
  ['MULGREW' 'RANDELL']
  ['TOWLEY' 'LANE']
 ]

T: HAMER

// TC-10
// Tests Requirements R3, R6
// short form command name, non-existing teacher
// expected output: []

T: SMITH

// TC-11
// Tests Requirements R3, R6
// long form command name, existing teacher
// expected output: [
  ['LIBRANDI' 'TODD']
  ['HAVIR' 'BOBBIE']
  ['SARAO' 'DIEDRA']
  ['VANCOTT' 'MIKE']
  ['WICINSKY' 'TERESE']
  ['KOZOLA' 'BUSTER']
  ['MULLINGS' 'LEIGHANN']
  ['BUSSMANN' 'BILLY']
  ['BERBES' 'DICK']
  ['MULGREW' 'RANDELL']
  ['TOWLEY' 'LANE']
]

Teacher: Hamer

// TC-12
// Tests Requirements R3, R6
// long form command name, non-existing teacher
// expected output: []

Teacher: Smith

// TC-13
// Tests Requirements R3, R7
// short form command name, existing grade
// expected output: [
  ['COOKUS' 'XUAN']
  ['ELHADDAD' 'SHANTE']
  ['BRODERSEN' 'HYE']
  ['SWEDLUND' 'SHARRI']
  ['CIGANEK' 'MANIE']
  ['COVINGTON' 'TOMAS']
  ['EARLY' 'TORY']
  ['LINHART' 'LELA']
  ['THEUNISSEN' 'GRACE']
]

G: 3

// TC-14
// Tests Requirements R3, R7
// short form command name, non-existing grade
// expected output: []

G: 10

// TC-15
// Tests Requirements R3, R7
// long form command name, existing grade
// expected output: [
  ['COOKUS' 'XUAN']
  ['ELHADDAD' 'SHANTE']
  ['BRODERSEN' 'HYE']
  ['SWEDLUND' 'SHARRI']
  ['CIGANEK' 'MANIE']
  ['COVINGTON' 'TOMAS']
  ['EARLY' 'TORY']
  ['LINHART' 'LELA']
  ['THEUNISSEN' 'GRACE']
]

Grade: 3

// TC-16
// Tests Requirements R3, R7
// long form command name, non-existing grade
// expected output: []

Grade: 10

// TC-17
// Tests Requirments R3, R13
// quit command
// expected output: program terminates

Q

// TC-18
// Tests Requirments R3, R13
// quit command
// expected output: program terminates

Quit

// TC-19
// Tests Requirments E1
// invalid command
// expected output: program does not terminate, prompts again

Bad: HAVIR

// TC-20
// Tests Requirments E1
// invalid command
// expected output: program does not terminate, prompts again

B: HAMER

// TC-21
// Tests Requirements R8
// short form command name, non-existing bus route
// expected output: [] 

B: 105

// TC-22
// Tests Requirements R8
// long form command name for existing bus route
// expected output: [['SCHOENECKER' 'PHUONG']
                    ['FINCHMAN' 'MATHILDA']
                    ['BRODERSEN' 'HYE']
                    ['HAVIR' 'BOBBIE']
                    ['MASSART' 'ELDON']
                    ['GARTH' 'JOHN']
                    ['CREMEANS' 'RANDOLPH']
                    ['KREESE' 'CARRIE']]

Bus: 0

// TC-23
// Tests Requirements R8
// short form command name for existing bus route
// expected output: [['SCHOENECKER' 'PHUONG']
                    ['FINCHMAN' 'MATHILDA']
                    ['BRODERSEN' 'HYE']
                    ['HAVIR' 'BOBBIE']
                    ['MASSART' 'ELDON']
                    ['GARTH' 'JOHN']
                    ['CREMEANS' 'RANDOLPH']
                    ['KREESE' 'CARRIE']]

B: 0

// TC-24
// Tests Requirements R9
// short form command name for non-existing grade 
// expected output: -

G: 5 H

// TC-25
// Tests Requirements R9
// short form command name for non-existing label
// expected output: -

G: 3 M

// TC-26
// Tests Requirements R9
// short form command name for existing grades and labels
// expected output: ['SAELEE' 'DANILO' 2.85 54 'FALKER' 'ADOLPH'] for both

G: 1 L

// TC-27
// Tests Requirements R9
// long form command name for existing grades and labels
// expected output: ['SAELEE' 'DANILO' 2.85 54 'FALKER' 'ADOLPH'] for both

Grade: 1 L

// TC-28
// Tests Requirements R10
// short form command name for grades with no students
// expected output: nan

A: 0

// TC-29
// Tests Requirements R10
// long form command name for grades with no students
// expected output: nan

Average: 5

// TC-30
// Tests Requirements R10
// short form command name for valid grade with students
// expected output: 3.048888888888889

A: 3

// TC-31
// Tests Requirements R11
// long form command name for valid information about student
// expected output: 0 :  0
                    1 :  2
                    2 :  13
                    3 :  9
                    4 :  15
                    5 :  0
                    6 :  21

Info

// TC-32
// Tests Requirements R11
// short form command name for valid information about student
// expected output: 0 :  0
                    1 :  2
                    2 :  13
                    3 :  9
                    4 :  15
                    5 :  0
                    6 :  21

I

// TC-34
// Tests Requirement NR1
// short form command for students enrolled in a classroom
// expected output: [
  ['WORBINGTON' 'DEEDRA']
  ['SPANICEK' 'KENDRA']
  ['GUICE' 'CODI']
  ['GLOR' 'HUNG']
  ['GUM' 'NOAH']
  ['NOVICK' 'ROLLAND']
  ['DELUNA' 'KRYSTAL']
  ['COMO' 'ZANDRA']
]

C: S 112


// TC-35
// Tests Requirement NR1
// long form command for students enrolled in a classroom
// expected output: [
  ['WORBINGTON' 'DEEDRA']
  ['SPANICEK' 'KENDRA']
  ['GUICE' 'CODI']
  ['GLOR' 'HUNG']
  ['GUM' 'NOAH']
  ['NOVICK' 'ROLLAND']
  ['DELUNA' 'KRYSTAL']
  ['COMO' 'ZANDRA']
]

Classroom: Students 112

// TC-36
// Tests Requirements NR1
// short form invalid command for students enrolled in a classroom
// expected output: []

C: S 200

// TC-37
// Tests Requirements NR1
// long form invalid command for students enrolled in a classroom
// expected action: prompts again, no output

Classroom: Student Smith

// TC-38
// Tests Requirement NR2
// short form command for teachers teaching a classroom
// expected output: [['CHIONCHIO' 'PERLA']]

C: T 112


// TC-39
// Tests Requirement NR2
// long form command for teachers teaching a classroom
// expected output: [['CHIONCHIO' 'PERLA']]

Classroom: Teachers 112

// TC-40
// Tests Requirements NR2
// short form invalid command for teachers teaching a classroom
// expected output: []

C: T 200

// TC-41
// Tests Requirements NR2
// long form invalid command for teachers teaching a classroom
// expected action: prompts again, no output

Classroom: Teacher Smith

// TC-42
// Tests Requirement NR3
// short form command for teachers teaching a grade
// expected output: [
  ['COOL' 'REUBEN' 101]
  ['HANTZ' 'JED' 105]
  ['CHIONCHIO' 'PERLA' 112]
 ]

G: T 4

// TC-43
// Tests Requirement NR3
// long form command for teachers teaching a grade
// expected output: [
  ['COOL' 'REUBEN' 101]
  ['HANTZ' 'JED' 105]
  ['CHIONCHIO' 'PERLA' 112]
 ]

Grade: Teachers 4 

// TC-44
// Tests Requirements NR3
// short form invalid command for teachers teaching a grade
// expected output: []

G: T 10

// TC-45
// Tests Requirements NR3
// long form invalid command for teachers teaching a grade
// expected action: prompts again, no output

Grade: Teacher Smith

// TC-46
// Tests Requirements NR4
// short form command for enrollment
// expected output: 
    101     1
    102     5
    103     2
    104     2
    105     6
    106     2
    107     7
    108    11
    109     5
    110     2
    111     9
    112     8

E

// TC-47
// Tests Requirements NR4
// long form command for enrollment
// expected output: 
    101     1
    102     5
    103     2
    104     2
    105     6
    106     2
    107     7
    108    11
    109     5
    110     2
    111     9
    112     8

Enrollment

// TC-48
// Tests Requirements NR4
// short form invalid command for enrollment
// expected action: prompts again, no output

E 50

// TC-49
// Tests Requirements NR4
// long form invalid command for enrollment
// expected action: prompts again, no output

Enrollment: 50

// TC-50
// Tests Requirements NR5
// short form to get IQR and quartiles for GPAs per grade level
// expected output: [grade      
                    1      0.25    2.9225
                          0.50    2.9950
                          0.75    3.0675
                    2      0.25    2.8800
                          0.50    2.9200
                          0.75    3.0100
                    3      0.25    2.9100
                          0.50    3.1100
                          0.75    3.1200
                    4      0.25    2.8550
                          0.50    2.9700
                          0.75    3.0100
                    6      0.25    2.8500
                          0.50    2.9300
                          0.75    3.1300
                    Name: GPA, dtype: float64]

R: G

// TC-51
// Tests Requirements NR5
// long form to get IQR and quartiles for GPAs per teacher
// expected output: [lastName_x  firstName_x
                    ALPERT      JONATHAN       3.2000
                    BODZIONY    LUZ            3.1200
                    CHIONCHIO   PERLA          3.0050
                    COOL        REUBEN         2.9100
                    FAFARD      ROCIO          3.1150
                    FALKER      ADOLPH         3.0675
                    GAMBREL     JAE            3.1400
                    HAMER       GAVIN          3.0300
                    HANTZ       JED            3.0500
                    KERBS       BENITO         3.1000
                    NISTENDIRK  NANCY          3.0200
                    STEIB       GALE           2.9100
                    Name: GPA, dtype: float64]

RangeQuartiles: Teacher

// TC-52
// Tests Requirements NR5
// combination of short and long form to get IQR and quartiles for GPAs per bus route
// expected output: [bus      
                    0    0.25    2.8400
                        0.50    2.8800
                        0.75    3.1175
                    51   0.25    2.9500
                        0.50    3.0250
                        0.75    3.0950
                    52   0.25    2.8275
                        0.50    2.8700
                        0.75    2.9200
                    53   0.25    3.0000
                        0.50    3.1000
                        0.75    3.1200
                    54   0.25    2.8650
                        0.50    2.9250
                        0.75    2.9725
                    55   0.25    2.8800
                        0.50    3.1000
                        0.75    3.2200
                    56   0.25    2.8500
                        0.50    2.8850
                        0.75    2.9800]

R: Bus

// TC-53
// Tests Requirements NR5
// invalid input for IQR/quartiles 
// expected output: None

R: Classroom

// TC-54
// Tests Requirements NR5
// use short form to get meanGPA of each bus route
// expected output: [bus
                    0     2.952500
                    51    3.020000
                    52    2.885000
                    53    3.055556
                    54    2.941667
                    55    3.036667
                    56    2.921667
                    Name: GPA, dtype: float64]

M: B

// TC-55
// Tests Requirements NR5
// use long form to get meanGPA for each grade
// expected output: [grade
                    1    2.995000
                    2    2.946154
                    3    3.048889
                    4    2.951333
                    6    2.977143
                    Name: GPA, dtype: float64]

MeanGPA: Grade


// TC-56
// Tests Requirements NR5
// combination of short and long form to get IQR and quartiles for GPAs per teacher
// expected output: [lastName_x  firstName_x
                    ALPERT      JONATHAN       3.170000
                    BODZIONY    LUZ            3.090000
                    CHIONCHIO   PERLA          2.985000
                    COOL        REUBEN         2.910000
                    FAFARD      ROCIO          3.014286
                    FALKER      ADOLPH         2.995000
                    GAMBREL     JAE            2.960000
                    HAMER       GAVIN          2.954545
                    HANTZ       JED            2.913333
                    KERBS       BENITO         2.976000
                    NISTENDIRK  NANCY          2.962222
                    STEIB       GALE           2.900000
                    Name: GPA, dtype: float64]

MeanGPA: T

// TC-57
// Tests Requirements NR5
// invalid input for MeanGPA
// expected output: None

M: 305

// TC-58
// Tests Requirements NR5
// use short form to get standard deviation of GPA for each teacher
// expected output: [lastName_x  firstName_x
                    ALPERT      JONATHAN       0.060000
                    BODZIONY    LUZ            0.060000
                    CHIONCHIO   PERLA          0.060622
                    COOL        REUBEN         0.000000
                    FAFARD      ROCIO          0.150889
                    FALKER      ADOLPH         0.145000
                    GAMBREL     JAE            0.154532
                    HAMER       GAVIN          0.127019
                    HANTZ       JED            0.147271
                    KERBS       BENITO         0.117405
                    NISTENDIRK  NANCY          0.153462
                    STEIB       GALE           0.020000
                    Name: GPA, dtype: float64]

D: T

// TC-59
// Tests Requirements NR5
// use long form to get standard deviation of GPA for each bus route
// expected output: [bus
                    0     0.142982
                    51    0.078102
                    52    0.087892
                    53    0.117200
                    54    0.107690
                    55    0.179072
                    56    0.115962
                    Name: GPA, dtype: float64]

Deviation: Bus

// TC-60
// Tests Requirements NR5
// combination of short and long form to get IQR and quartiles for GPAs per grade
// expected output: [grade
                    1    0.145000
                    2    0.118746
                    3    0.150661
                    4    0.109232
                    6    0.144161
                    Name: GPA, dtype: float64]

D: Grade

// TC-61
// Tests Requirements NR5
// invalid input for standardDeviation 
// expected output: None

Deviation: firstName
